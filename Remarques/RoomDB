1-Installation:

dans gradle mode.app:
//this need to execute in andoidx sdk 28 , update it in gradle ..
    implementation "androidx.room:room-runtime:2.1.0"
    annotationProcessor "androidx.room:room-compiler:2.1.0"


add: google()

2-Table: //create classes ..

import android.arch.persistence.room.Entity;  
import android.arch.persistence.room.PrimaryKey;  
import android.support.annotation.NonNull;  

@Entity(tableName = "items")  
public class Item {  
    @PrimaryKey  
    @NonNull  private Long id;  
    private String name;  
    private String description;  
    private Long quantity;  
}

2-DAO: // pour définir les accées a cette classe ..
import android.arch.persistence.room.Dao;  
import android.arch.persistence.room.Delete;  
import android.arch.persistence.room.Insert;  
import android.arch.persistence.room.Update;  
import inventory.techiediaries.com.models.Item;  

@Dao  
public interface ItemDAO {  
    @Insert  
  public void insert(Item... items);    
    @Update  
  public void update(Item... items);   
    @Delete  
  public void delete(Item item);  

@Query("SELECT * FROM items")  
public List<Item> getItems();

@Query("SELECT * FROM items WHERE id = :id")  
public Item getItemById(Long id);

}



3-Creating database:

import android.arch.persistence.room.Database;  
import android.arch.persistence.room.RoomDatabase;  

import inventory.techiediaries.com.dao.ItemDAO;  
import inventory.techiediaries.com.models.Item;  

@Database(entities = {Item.class}, version = 1)  
public abstract class AppDatabase extends RoomDatabase {  
    public abstract ItemDAO getItemDAO();  
}



4-instanciate the DB:

AppDatabase database = Room.databaseBuilder(this, AppDatabase.class, "mydb")  
        .allowMainThreadQueries()  
        .build();


5-CRUD: //tt est bien faire les saving ..

ItemDAO itemDAO = database.getItemDAO();  
Item item = new Item();  
item.setName("Item001");  
item.setDescription("Item 001");  
item.setQuantity(1000);  

itemDAO.insert(item);  
List<Item> items = itemDAO.getItems();    
System.out.println(items);

_____________________________________________________

#Migration:

-Si vous upgradez votre BD et vous avez ajoutez de nouvelle tables ou des changements , alors vous etes oubliger de faire ces changement
en ajoutant un objet Migratrion comme suit:

Room.databaseBuilder(getApplicationContext(), MyDb.class, "database-name")
        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();

tq MIGRATION_1_2=new Migration(1, 2) {
    @Override
    public void migrate(SupportSQLiteDatabase database) {
//migration from version 1 to version 2
        database.execSQL("CREATE TABLE `Fruit` (`id` INTEGER, "
                + "`name` TEXT, PRIMARY KEY(`id`))");
    }
};

-Si vous voulez que l app reconstruire le shéma a nouveau et supprimer l ancien valeur lors de Upgrade database do:

Room.databaseBuilder(getApplicationContext(), MyDb.class, "database-name")
        .fallbackToDestructiveMigration() // this the method that destruct DB an recreate it ..
        .build();

if you want to recreate it just if   is being in Downgrade so call: 
fallbackToDestructiveMigrationOnDowngrade()

RQ:
-si vous avez changer le schema de BD donc le log va indiquer vous devez incrémenter la version de BD , puis il vous indiquez
les colonnes existant avec les colonnes qui doivent etre existé , par la comparaison vous obtient les champs a ajouter ou a supprimer.

-Dans Le Cas de suppression de colonne:
il nest pa possible d executer directement une requete de suppression alors il faus créé une table temporaire qui a les données de table
original puis supprimer l original et renomer tmp avec le nom d original:
database.execSQL("CREATE TABLE IF NOT EXISTS `tst_back` (`t` TEXT NOT NULL, `t2` TEXT, PRIMARY KEY(`t`))");
                       database.execSQL("INSERT OR ABORT INTO `tst_back`(`t`,`t2`)  SELECT t,t2 FROM tst");
                       database.execSQL("DROP TABLE tst");
                       database.execSQL("ALTER TABLE tst_back RENAME TO tst");
_______________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________
RAMARQUES:

-Manipulation des EXTENDS:

@Entity(ignoredColumns = {"date_bon","lieu"},foreignKeys = @ForeignKey(
        entity = Bon.class,
        parentColumns = "code_bon",
        childColumns = "code_bon"),
@ForeignKey(
        entity = Bon2.class,
        parentColumns = "code_bon",
        childColumns = "code_bon")
)
public class BonVente extends Bon {

    public BonVente() {

    }

-pour les clés etrangere qui permet de lié les 2 tables donc en utilise la meme colonne de pere en fils qui a le mme nom 
-pour que l heritage soit non redandant dans la table fils (ne réecrer pas les colonne commune) en utilise ignoredColumns = {"date_bon","lieu"}



______________________________________________
-Primary Key:
...
 @PrimaryKey
    public String code_bon;
..

-Composite Primary Key:
@Entity(primaryKeys = {"column1","column2","column3"})
class DummyClass {
    ...
}


__________________________

-Foreign Key:
@Entity(foreignKeys = @ForeignKey(
        entity = Bon.class,
        parentColumns = "code_bon",
        childColumns = "code_bon"),
@ForeignKey(
        entity = Bon2.class,
        parentColumns = "code_bon",
        childColumns = "code_bon")
)
public class BonVente extends Bon {

    public BonVente() {

    }

Il ya 2 chose a noté:
1-la structure d ajouté un foreign key est comme indiqué ..
2-si la classe herite d un autre et un champ qui hérité donc n est pas mentinné dans la classe , alors pas 2 blem 
on mentionne se champ de parent , dans: parentColumns = "code_bon", childColumns = "code_bon"

__________________________________________
-TRANSACTIONS:

bd.runInTransaction(new Runnable() {
            @Override
            public void run() {
                try {
                    bd.getBonDAO().insert(b);
                    bd.getVenteDAO().insert(v);
                    bd.getPrDAO().insert(pv);
                }catch (SQLiteException e){
                   Log.e("ppp",e.getMessage());
                }
            }
        });



